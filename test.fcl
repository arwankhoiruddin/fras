FUNCTION_BLOCK tipper	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	cpu_load : REAL;
	ram_load : REAL;
	job_length : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	priority : REAL;
END_VAR

FUZZIFY cpu_load			// Fuzzify input variable 'cpu_load': {'low', 'high'}
	TERM low := (0, 1) (4, 0) ;
	TERM high := (1, 0) (1, 1);
END_FUZZIFY

FUZZIFY ram_load			// Fuzzify input variable 'ram_load': { 'low', 'high' }
	TERM low := (0, 1) (1, 0) ;
	TERM high := (1, 0) (1, 1);
END_FUZZIFY

FUZZIFY job_length
    TERM short := (0, 1) (80, 0);
    TERM long := (50, 0) (100, 1);
END_FUZZIFY

DEFUZZIFY priority			// Defzzzify output variable 'priority' : {'low', 'high'}
	TERM low := (0,1) (1, 0);
	TERM high := (1,0) (1, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF cpu_load IS low OR ram_load IS low THEN priority IS high;
	RULE 2 : IF cpu_load IS low THEN priority IS high;
	RULE 3 : IF ram_load IS low THEN priority IS high;
	RULE 4 : IF cpu_load IS high OR ram_load IS high THEN priority IS low;
	RULE 5 : IF cpu_load IS high OR ram_load IS low THEN priority IS low;
	RULE 6 : IF job_length IS short THEN priority IS high;
	RULE 7 : IF job_length IS long THEN priority IS low;
END_RULEBLOCK

END_FUNCTION_BLOCK
